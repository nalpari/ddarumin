generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String      @id @default(cuid())
  username  String      @unique
  password  String
  name      String
  status    AdminStatus @default(ACTIVE)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("admins")
}

model FranchiseInquiry {
  id             String         @id @default(cuid())
  name           String
  ageGroup       String         @map("age_group")
  phone          String
  email          String?
  storeOwnership StoreOwnership @map("store_ownership")
  region         String
  brandAwareness String[]       @map("brand_awareness")
  availableTime  String         @map("available_time")
  content        String
  status         InquiryStatus  @default(PENDING)
  response       String?
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  @@map("franchise_inquiries")
}

model StartupSession {
  id                 String             @id @default(cuid())
  round              Int                @unique
  sessionDate        DateTime           @map("session_date")
  sessionTime        String             @map("session_time")
  location           SessionLocation
  additionalLocation String?            @map("additional_location")
  registrationStart  DateTime           @map("registration_start")
  registrationEnd    DateTime           @map("registration_end")
  status             SessionStatus      @default(WAITING)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  applicants         SessionApplicant[]

  @@map("startup_sessions")
}

model SessionApplicant {
  id             String         @id @default(cuid())
  sessionId      String         @map("session_id")
  name           String
  ageGroup       String         @map("age_group")
  phone          String
  email          String
  storeOwnership StoreOwnership @map("store_ownership")
  attendeeCount  Int            @map("attendee_count")
  desiredRegion  String         @map("desired_region")
  availableTime  String         @map("available_time")
  createdAt      DateTime       @default(now()) @map("created_at")
  session        StartupSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_applicants")
}

model FAQ {
  id        String        @id @default(cuid())
  category  FAQCategory
  title     String
  content   String
  status    ContentStatus @default(ACTIVE)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("faqs")
}

model Category {
  id        String        @id @default(cuid())
  name      String        @unique
  status    ContentStatus @default(ACTIVE)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  menus     Menu[]

  @@map("categories")
}

model Menu {
  id             String         @id @default(cuid())
  categoryId     String         @map("category_id")
  name           String
  price          Int
  discountPrice  Int?           @map("discount_price")
  marketingTags  MarketingTag[] @map("marketing_tags")
  hotColdOptions Temperature[]  @map("hot_cold_options")
  description    String
  imageUrl       String?        @map("image_url")
  status         ContentStatus  @default(ACTIVE)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  category       Category       @relation(fields: [categoryId], references: [id])

  @@map("menus")
}

model NewMenu {
  id        String        @id @default(cuid())
  title     String
  startDate DateTime      @map("start_date")
  endDate   DateTime      @map("end_date")
  imageUrl  String        @map("image_url")
  status    NewMenuStatus @default(WAITING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("new_menus")
}

model Store {
  id                String          @id @default(cuid())
  name              String
  region            StoreRegion
  address           String
  additionalAddress String?         @map("additional_address")
  phone             String
  operatingStatus   OperatingStatus @map("operating_status")
  storeType         StoreType       @map("store_type")
  options           StoreOption[]
  images            String[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  eventStores       EventStore[]

  @@map("stores")
}

model Event {
  id              String       @id @default(cuid())
  title           String
  startDate       DateTime     @map("start_date")
  endDate         DateTime     @map("end_date")
  content         String
  imageUrl        String       @map("image_url")
  homepagePreview Boolean      @default(false) @map("homepage_preview")
  status          EventStatus  @default(WAITING)
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  eventStores     EventStore[]

  @@map("events")
}

model EventStore {
  id          String  @id @default(cuid())
  eventId     String  @map("event_id")
  storeId     String  @map("store_id")
  isAllStores Boolean @default(false) @map("is_all_stores")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  store       Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([eventId, storeId])
  @@map("event_stores")
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum StoreOwnership {
  OWN
  NONE
}

enum InquiryStatus {
  PENDING
  COMPLETED
}

enum SessionLocation {
  HEADQUARTERS
  SEOUL_OFFICE
  MUGYO_BRANCH
  YEOUIDO_BRANCH
}

enum SessionStatus {
  WAITING
  ACCEPTING
  CLOSED
}

enum FAQCategory {
  STORE
  MENU
  STARTUP
  SMART_ORDER
}

enum ContentStatus {
  ACTIVE
  INACTIVE
}

enum MarketingTag {
  NEW
  BEST
  EVENT
}

enum Temperature {
  HOT
  COLD
}

enum NewMenuStatus {
  WAITING
  ACTIVE
  EXPIRED
}

enum StoreRegion {
  SEOUL
  GYEONGGI
  GANGWON
  CHUNGBUK
  CHUNGNAM
  JEONBUK
  JEONNAM
  GYEONGBUK
  GYEONGNAM
}

enum OperatingStatus {
  OPERATING
  CLOSED
  CONSULTING
}

enum StoreType {
  DIRECTLY_MANAGED
  FRANCHISE
}

enum StoreOption {
  DELIVERY
  PARKING
  MOBILE_ORDER
}

enum EventStatus {
  WAITING
  ACTIVE
  EXPIRED
}
